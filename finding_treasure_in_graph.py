# Explanation: For this problem I have used DFS algorithm. I have converted all the points into vertexs.
# 1. In iteration I have compared If the nodes in adjacent places are “.” are not. If the adjacent is “.” or “D” I have connected them in undirected adjacent list.
# 2. If its an “#” I skipped.
# 3. When its a “D” , In the very beginning I decleared COLOR list and keep update the color while its a “D”. Or else it is initialized with WHITE.
# 4. In DFS methode, I decealred a GLOBAL variable “final”. In a loop I have iterated in all verted when the vertex is white I called DFS. If the vertex’s color is D means Diamond I collected the Diamon and colored it as WHITE. Then for White color The DFS runs
# 5. In the end, Main theme here is ,
# a. For single run of DFS , I take the diamond count and compare with the final variable. Whichever is the maximum is our desired answer.


# 9 11
# .#..D...D..
# .#.#######.
# D#.#..D..#.
# D#D#.###.#D
# .#.#..D#.#.
# .#.#####.#D
# D#..D...D#.
# .#########.
# ...D..D...D

# -*- coding: utf-8 -*-
"""task6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16XK2pfTF-Q2Y8ZZn-lzCKKqzMN6OYePv
"""

inp = open('/content/input6.txt',"r")
out = open('/content/output6.txt','w')

x,y = list(map(int,inp.readline().split()))
user = []

for i in range(x):
  colum = list(inp.readline().strip())
  user.append(colum)

adjL = [[] for i in range(x*y)]
col = ["w"] * (x*y)


for i in range(x):
  for j in range(y):
    if user[i][j] == "D":
      col[j + i * y] = "D"
    if (user[i][j] != "#") and (j < y-1) :
      if (user[i][j+1] != "#")  :
        adjL[j + i * y].append(j + i * y +1)
        adjL[j + i * y +1].append(j+ i * y)
    if (user[i][j] != "#") and (i < x-1) :
      if (user[i+1][j] != "#") :
        adjL[j + i * y].append(j + i * y + y)
        adjL[j + i * y + y].append(j+ i * y)
########################  DFS ####################
def DFS(G):
  def DFS_visit(G,curr,diamond):
    col[curr] = "g"
    for v in G[curr]:
      if col[v] == "D":
        diamond += 1
        col[v] = "w"
      if col[v] == "w":
        diamond = DFS_visit(G,v,diamond)
    col[curr] = "b"
    return diamond
  final = 0
  for i in range(x*y): #DFS starting
    diamond = 0
    if col[i] == "D":
      diamond += 1
      col[i] = "w"
    if col[i] == "w":
      final= max(final, DFS_visit(G,i,diamond))
  return final

final = DFS(adjL)
out.write(f"{final}")
inp.close()
out.close()



